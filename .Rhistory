plots
plots[or]
N
N <- length(cdcat.obj$est)
M
m
mm <- 1
plots[or][mm] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
plots[or][mm]
mm
mm <- 2
plots[or][mm]
plots[or][mm] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
plots[or][mm] <-
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(), axis.text.x = element_blank())
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(), axis.text.x = element_blank())
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank())
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank())
plots[or][mm][[1]]
m <- length(cdmCAT.obj.sum.l)
if(is.null(model)){
for(cc in 1:m){
tmp <- cdcat.obj.l[[cc]]$specifications$model
if(!is.null(cdcat.obj.l[[cc]]$specifications$fit$control$maxitr)){
if(cdcat.obj.l[[cc]]$specifications$fit$control$maxitr == 0){tmp <- "TRUE"}
}
model <- c(model, tmp)
} # end cc
}
if(any(duplicated(model))){warning("Duplicated models. Consider providing different labels")}
stats <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$stats)
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank())
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank())
# for (mm in 2:m) {
# plots[or][mm] <-
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_x_continuous(name="Speed of cars", limits=c(0, 30))
# for (mm in 2:m) {
# plots[or][mm] <-
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ))
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ))
# for (mm in 2:m) {
# plots[or][mm] <-
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ)) + theme_classic()
# for (mm in 2:m) {
# plots[or][mm] <-
plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ))
res.stats <- matrix(unlist(stats), nrow = m, byrow = TRUE)
rownames(res.stats) <- model
colnames(res.stats) <- names(stats[[1]])
or <- order(res.stats[,"Mean"])
res.stats <- res.stats[or, ]
for (mm in 2:m) {
plots[or][mm] <- plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ))
}
plots[or][mm]
res.stats <- matrix(unlist(stats), nrow = m, byrow = TRUE)
rownames(res.stats) <- model
colnames(res.stats) <- names(stats[[1]])
or <- order(res.stats[,"Mean"])
res.stats <- res.stats[or, ]
for (mm in 2:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ))
}
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
recovery <- lapply(cdmCAT.obj.sum.l, function(x) x$recovery)
res.stats <- matrix(unlist(stats), nrow = m, byrow = TRUE)
rownames(res.stats) <- model
colnames(res.stats) <- names(stats[[1]])
or <- order(res.stats[,"Mean"])
res.stats <- res.stats[or, ]
for (mm in 2:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(limits=c(0, MAXJ))
}
for (mm in 2:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank())
}
res.plots <- plot_grid(plotlist = plots[or], ncol = m, labels = model[or])
res.recov <- matrix(unlist(recovery), nrow = m, byrow = TRUE)
rownames(res.recov) <- model
K <- ncol(cdcat.obj.l[[1]]$specifications$Q)
colnames(res.recov) <- c("PCA", paste(1:K, "/", K, sep = ""))
or2 <- order(res.recov[,"PCA"], decreasing = TRUE)
res.recov <- res.recov[or2, ]
res <- list("stats" = res.stats, "plots" = res.plots, "recovery" = res.recov)
class(res) <- "cdcat.comp"
res.plots
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
recovery <- lapply(cdmCAT.obj.sum.l, function(x) x$recovery)
res.stats <- matrix(unlist(stats), nrow = m, byrow = TRUE)
rownames(res.stats) <- model
colnames(res.stats) <- names(stats[[1]])
or <- order(res.stats[,"Mean"])
res.stats <- res.stats[or, ]
for (mm in 2:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank())
}
res.plots <- plot_grid(plotlist = plots[or], ncol = m, labels = model[or])
res.recov <- matrix(unlist(recovery), nrow = m, byrow = TRUE)
rownames(res.recov) <- model
K <- ncol(cdcat.obj.l[[1]]$specifications$Q)
colnames(res.recov) <- c("PCA", paste(1:K, "/", K, sep = ""))
or2 <- order(res.recov[,"PCA"], decreasing = TRUE)
res.plots
plot_grid(plotlist = plots[or], ncol = m, labels = model[or],
label_size = 12,
label_x = 0, label_y = 0,
hjust = -0.5, vjust = -0.5)
plot_grid(plotlist = plots[or], ncol = m, labels = model[or],
label_size = 10,
label_x = 0, label_y = 0,
hjust = -0.5, vjust = -0.5)
model[or]
paste(model[or], sep = "")
paste(model[or], sep = "", collapse = )
paste(model[or], sep = "", collapse = "")
paste(model[or], sep = "", collapse = ",")
paste(model[or], sep = "", collapse = ", ")
paste("Models from left to right: ", paste(model[or], sep = "", collapse = ", "), collapse = "")
paste("Models from left to right:", paste(model[or], sep = "", collapse = ", "), collapse = "")
title <- ggdraw() +
draw_label(
paste("Models from left to right:", paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
plot_grid(title,
plotlist = plots[or],
ncol = m, labels = model[or],
label_size = 10,
label_x = 0, label_y = 0,
hjust = -0.5, vjust = -0.5)
plot_grid(title,
plotlist = plots[or],
ncol = 1,
rel_heights = c(0.1, 1))
plot_row <- plotlist = plots[or]
plot_row <- plot_grid(plotlist = plots[or])
plot_grid(title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1))
plot_grid(title, plot_row,
ncol = 1)
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_row
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
title <- ggdraw() +
draw_label(
paste("Models from left to right:", paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1))
for (mm in 1:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.ticks.x = element_blank())
}
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1))
title <- ggdraw() +
draw_label(
paste("Models from left to right:", paste(model[or], sep = "", collapse = ", "), collapse = ""),
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
title <- ggdraw() +
draw_label(
paste("Models from left to right:", paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'bold',
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
title <- ggdraw() +
title <- ggdraw() +
draw_label(
paste("Models from left to right:", paste(model[or], sep = "", collapse = ", "), collapse = ""),
# fontface = 'bold',
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
# fontface = 'plain',
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row,
ncol = 1,
rel_heights = c(0.1, 1))
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
# fontface = 'plain',
size = 10, x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
# fontface = 'plain',
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
# fontface = 'plain',
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'plain', size = 10,
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
plots[or] + theme_classic()
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'bold', size = 10,
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
recovery <- lapply(cdmCAT.obj.sum.l, function(x) x$recovery)
res.stats <- matrix(unlist(stats), nrow = m, byrow = TRUE)
rownames(res.stats) <- model
colnames(res.stats) <- names(stats[[1]])
or <- order(res.stats[,"Mean"])
res.stats <- res.stats[or, ]
for (mm in 1:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.ticks.x = element_blank())
}
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'bold', size = 10,
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
plots
plot_row
plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
res.plots <- plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
#' This function compares different \code{cdcat} objects in terms of classification accuracy (\code{FIXED.LENGTH == TRUE}) and/or CAT lenght \code{FIXED.LENGTH == FALSE}).
#'
#' @param cdcat.obj.l List of \code{cdcat} objects to be compared
#' @param alpha N x K matrix with the attribute patterns to be compared to the \code{cdcat} results
#' @param label labels for the \code{cdcat} objects. If NULL (by default), the models are used as label
#'
#' @return \code{cdcat.comp} returns an object of class \code{cdcat.comp}.
#'
#' @export
#'
cdcat.comp <- function(cdcat.obj.l, alpha, label = NULL, ...){
if(!is.null(label)){
if(length(label) != length(cdcat.obj.l)){stop("label and cdcat.obj.l must have the same length")}
}
model <- label
cdmCAT.obj.sum.l <- list()
for(cc in 1:length(cdcat.obj.l)){cdmCAT.obj.sum.l[[cc]] <- cdcat.summary(cdcat.obj.l[[cc]], alpha)}
MAXJ <- cdcat.obj.l[[1]]$specifications$MAXJ
if(cdcat.obj.l[[1]]$specifications$FIXED.LENGTH == TRUE) {
Jtot <-  MAXJ * length(cdcat.obj.l)
data0 <- lapply(cdmCAT.obj.sum.l, function(x) x$recovery$numeric)
datacomp <- NULL
for(cc in 1:length(cdmCAT.obj.sum.l)){
if(is.null(model)){
model.cc <- cdcat.obj.l[[cc]]$specifications$model
if(is.null(cdcat.obj.l[[cc]]$specifications$fit$control$maxitr)){
model.cc <- model.cc
} else if(cdcat.obj.l[[cc]]$specifications$fit$control$maxitr == 0) {
model.cc <- "TRUE"
}
} else {
model.cc <- model[cc]
}
if(model.cc %in% datacomp$`rep(model.cc, nrow(data0[[cc]]))`){warning("Duplicated models. Consider providing different labels")}
datacomp <- rbind(datacomp, cbind(data0[[cc]], rep(model.cc, nrow(data0[[cc]]))))
}
datacomp <- as.data.frame(datacomp)
colnames(datacomp) <- c("item.position", "pattern.recovery", "attribute.recovery", "model")
PCVplot <- ggplot(data = datacomp, aes(x=item.position, y=pattern.recovery, colour = model)) +
theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank()) +
scale_x_continuous("Until Item Position", labels = 1:MAXJ, breaks = 1:MAXJ) +
scale_y_continuous("Pattern Recovery", limits = c(0,1), labels = seq(from = 0, to = 1, by = 0.10),
breaks = seq(from = 0, to = 1, by = 0.10)) +
geom_line() + geom_point()
PCAmplot <- ggplot(data = datacomp, aes(x=item.position, y=attribute.recovery, colour = model)) +
theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank()) +
scale_x_continuous("Until Item Position", labels = 1:MAXJ, breaks = 1:MAXJ) +
scale_y_continuous("Attribute Recovery", limits = c(0,1), labels = seq(from = 0, to = 1, by = 0.10),
breaks = seq(from = 0, to = 1, by = 0.10)) +
geom_line() + geom_point()
res <- list("PCVcomp" = PCVplot, "PCAmcomp" = PCAmplot, "data" = datacomp)
class(res) <- "cdcat.comp"
return(res)
}
if(cdcat.obj.l[[1]]$specifications$FIXED.LENGTH == FALSE) {
m <- length(cdmCAT.obj.sum.l)
if(is.null(model)){
for(cc in 1:m){
tmp <- cdcat.obj.l[[cc]]$specifications$model
if(!is.null(cdcat.obj.l[[cc]]$specifications$fit$control$maxitr)){
if(cdcat.obj.l[[cc]]$specifications$fit$control$maxitr == 0){tmp <- "TRUE"}
}
model <- c(model, tmp)
} # end cc
}
if(any(duplicated(model))){warning("Duplicated models. Consider providing different labels")}
stats <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$stats)
plots <- lapply(cdmCAT.obj.sum.l, function(x) x$CATlength$plot)
recovery <- lapply(cdmCAT.obj.sum.l, function(x) x$recovery)
res.stats <- matrix(unlist(stats), nrow = m, byrow = TRUE)
rownames(res.stats) <- model
colnames(res.stats) <- names(stats[[1]])
or <- order(res.stats[,"Mean"])
res.stats <- res.stats[or, ]
for (mm in 1:m) {
plots[or][mm][[1]] <- plots[or][mm][[1]] + theme(axis.ticks.x = element_blank())
}
title <- ggdraw() +
draw_label(
paste("Models from left to right:",
paste(model[or], sep = "", collapse = ", "), collapse = ""),
fontface = 'bold', size = 10,
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_row <- plot_grid(plotlist = plots[or], nrow = 1)
res.plots <- plot_grid(title, plot_row, ncol = 1, rel_heights = c(0.1, 1))
res.recov <- matrix(unlist(recovery), nrow = m, byrow = TRUE)
rownames(res.recov) <- model
K <- ncol(cdcat.obj.l[[1]]$specifications$Q)
colnames(res.recov) <- c("PCA", paste(1:K, "/", K, sep = ""))
or2 <- order(res.recov[,"PCA"], decreasing = TRUE)
res.recov <- res.recov[or2, ]
res <- list("stats" = res.stats, "plots" = res.plots, "recovery" = res.recov)
class(res) <- "cdcat.comp"
return(res)
}
}
# VARJ comparison
res.VARJ.sum.post.comp <- cdcat.comp(cdcat.obj.l = res.VARJ.l, alpha = att.v)
res.VARJ.sum.post.comp$stats
res.VARJ.sum.post.comp$plots
res.VARJ.sum.post.comp$recovery
#-----------Data generation----------#
Q <- sim180DINA$simQ
K <- ncol(Q)
N <- 50
dat <- sim180DINA$simdat[1:N,]
att <- sim180DINA$simalpha[1:N,]
#--------Nonparametric CD-CAT--------#
res.NPS <- cdcat(dat = dat, Q = Q, itemSelect = "NPS", MAXJ = 30, NPS.args = list(gate = "AND", pseudo.prob = TRUE, w.type = 1, seed = 12345), n.cores = 4)
#---------------Results--------------#
res.NPS$est[[1]] # estimates for the first examinee
att.plot(res.NPS, i = 1) # plot for estimates for the first examinee
#---------------Results--------------#
res.NPS$est[[1]] # estimates for the first examinee
att.plot(res.NPS, i = 1) # plot for estimates for the first examinee
# FIXJ summary
res.NPS.sum.real <- cdcat.summary(cdcat.obj = res.NPS, alpha = att) # vs. real accuracy
res.NPS.sum.real$recovery$plotPCV
res.NPS.sum.real$recovery$plotPCA
# Post-hoc CAT simulation
fit <- AlphaNP(Y = dat, Q = Q, gate = "AND")
att.J <- fit$alpha.est
class.J <- ClassRate(att, att.J) # upper-limit for accuracy
res.NPS.sum.post <- cdcat.summary(cdcat.obj = res.NPS, alpha = att.J)
res.NPS.sum.post$recovery$plotPCV + geom_hline(yintercept = class.J$PCV[K], color = "firebrick3")
res.NPS.sum.post$recovery$plotPCA + geom_hline(yintercept = class.J$PCA, color = "firebrick3")
library(cdcatR)
## Para ACTULIZAR MANUAL Y .TAR:
setwd("C:/Users/Usuario//Dropbox/pkg/cdcatR - 1.0.0/")
devtools::build_manual(pkg = "cdcatR")
?cdcatR
?cdcat
######################################
# Example 2.                         #
# CD-CAT simulation for multiple     #
# GDINA objs and comparison of       #
# performance on a validation sample #
######################################
#----------------Data----------------#
Q <- sim155complex$simQ
K <- ncol(Q)
parm <- sim155complex$simcatprob.parm
dat.c <- sim155complex$simdat.c
att.c <- sim155complex$simalpha.c
dat.v <- sim155complex$simdat.v
att.v <- sim155complex$simalpha.v
#-----(multiple) Model estimation----#
fitTRUE <- GDINA(dat = dat.c, Q = Q, catprob.parm = parm, control = list(maxitr = 0), verbose = 0)
fitGDINA <- GDINA(dat = dat.c, Q = Q, verbose = 0)
fitDINA <- GDINA(dat = dat.c, Q = Q, model = "DINA", verbose = 0)
fitDINO <- GDINA(dat = dat.c, Q = Q, model = "DINO", verbose = 0)
fitACDM <- GDINA(dat = dat.c, Q = Q, model = "ACDM", verbose = 0)
LR2step <- LR_2step(fitGDINA)
models <- LR2step$models.adj.pvalues
fitLR2 <- GDINA(dat = dat.c, Q = Q, model = models, verbose = 0)
#---------------CD-CAT---------------#
fit.l <- list(fitTRUE, fitGDINA, fitDINA, fitDINO, fitACDM, fitLR2)
res.FIXJ.l <- res.VARJ.l <- list()
for(mm in 1:length(fit.l)) {
fit <- fit.l[[mm]]
res.FIXJ.l[[mm]] <- cdcat(dat = dat.v, fit = fit,FIXED.LENGTH = TRUE, n.cores = 4)
res.VARJ.l[[mm]] <- cdcat(dat = dat.v, fit = fit, FIXED.LENGTH = FALSE, n.cores = 4)
}
mm
res.FIXJ.l[[mm]]
length(fit.l)
length(fit.l)
fit <- fit.l[[mm]]
fit
res.FIXJ.l[[mm]] <- cdcat(dat = dat.v, fit = fit,FIXED.LENGTH = TRUE, n.cores = 4)
dat.v
fit
FIXED.LENGTH = TRUE
n.cores = 4
cdcat(dat = dat.v, fit = fit,FIXED.LENGTH = TRUE, n.cores = 4)
res.FIXJ.l[[mm]] <- cdcat(fit = fit, dat = dat.v, FIXED.LENGTH = TRUE)
cdcat(fit = fit, dat = dat.v, FIXED.LENGTH = TRUE, n.cores = 4)
for(mm in 1:length(fit.l)) {
fit <- fit.l[[mm]]
res.FIXJ.l[[mm]] <- cdcat(fit = fit, dat = dat.v, FIXED.LENGTH = TRUE, n.cores = 4)
res.VARJ.l[[mm]] <- cdcat(fit = fit, dat = dat.v, FIXED.LENGTH = FALSE, n.cores = 4)
}
1+1
library(cdcatR)
citation("cdcatR")
setwd("C:/Users/Usuario//Dropbox/pkg/cdcatR - 1.0.0/")
devtools::build_manual(pkg = "cdcatR")
1+1
## Para ACTULIZAR MANUAL Y .TAR:
setwd("C:/Users/Usuario//Dropbox/pkg/cdcatR - 1.0.0/")
devtools::build_manual(pkg = "cdcatR")
1+1
setwd("C:/Users/Usuario//Dropbox/pkg/cdcatR - 1.0.0/")
devtools::build_manual(pkg = "cdcatR")
# Built < Build source package
build(pkg = "cdcatR")
# Built < Build source package
devtools::build(pkg = "cdcatR")
